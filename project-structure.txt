1: .
2: .env
  3: DATABASE_URL=mongodb+srv://abisamson:ZamirMS20@abisamson.bd0dlwf.mongodb.net/travel-diary
  4: GOOGLE_CLIENT_ID=161154193363-c1h5dab4ql464irs82eovpj435pirfnr.apps.googleusercontent.com
  5: GOOGLE_SECRET=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
  6: GOOGLE_CALLBACK=http://localhost:3000/oauth2callback
  7: SECRET=SEIRocks
8: README.md
9: app.js
  10: var createError = require('http-errors');
  11: var express = require('express');
  12: var path = require('path');
  13: var cookieParser = require('cookie-parser');
  14: var logger = require('morgan');
  15: 
  16: var session = require('express-session');
  17: 
  18: var passport = require('passport');
  19: 
  20: var methodOverride = require('method-override');
  21: 
  22: require('dotenv').config();
  23: require('./config/database');
  24: require('./config/passport');
  25: 
  26: var indexRouter = require('./routes/index');
  27: var usersRouter = require('./routes/users');
  28: var entriesRouter = require('./routes/entries');
  29: var commentsRouter = require('./routes/comments');
  30: 
  31: var app = express();
  32: 
  33: // view engine setup
  34: app.set('views', path.join(__dirname, 'views'));
  35: app.set('view engine', 'ejs');
  36: 
  37: app.use(logger('dev'));
  38: app.use(express.json());
  39: app.use(express.urlencoded({ extended: false }));
  40: app.use(cookieParser());
  41: app.use(express.static(path.join(__dirname, 'public')));
  42: 
  43: app.use(session({
  44:   secret: process.env.SECRET,
  45:   resave: false,
  46:   saveUninitialized: true
  47: }));
  48: 
  49: app.use(passport.initialize());
  50: app.use(passport.session());
  51: 
  52: app.use(function (req, res, next) {
  53:   res.locals.user = req.user;
  54:   next();
  55: });
  56: 
  57: app.use(methodOverride('_method')); 
  58: app.use('/', indexRouter);
  59: app.use('/users', usersRouter);
  60: app.use('/entries', entriesRouter);
  61: app.use('/', commentsRouter);
  62: 
  63: // catch 404 and forward to error handler
  64: app.use(function(req, res, next) {
  65:   next(createError(404));
  66: });
  67: 
  68: // error handler
  69: app.use(function(err, req, res, next) {
  70:   // set locals, only providing error in development
  71:   res.locals.message = err.message;
  72:   res.locals.error = req.app.get('env') === 'development' ? err : {};
  73: 
  74:   // render the error page
  75:   res.status(err.status || 500);
  76:   res.render('error');
  77: });
  78: 
  79: module.exports = app;
  80: 
81: bin
82: bin/www
  83: #!/usr/bin/env node
  84: 
  85: /**
  86:  * Module dependencies.
  87:  */
  88: 
  89: var app = require('../app');
  90: var debug = require('debug')('travel-diary:server');
  91: var http = require('http');
  92: 
  93: /**
  94:  * Get port from environment and store in Express.
  95:  */
  96: 
  97: var port = normalizePort(process.env.PORT || '3000');
  98: app.set('port', port);
  99: 
  100: /**
  101:  * Create HTTP server.
  102:  */
  103: 
  104: var server = http.createServer(app);
  105: 
  106: /**
  107:  * Listen on provided port, on all network interfaces.
  108:  */
  109: 
  110: server.listen(port);
  111: server.on('error', onError);
  112: server.on('listening', onListening);
  113: 
  114: /**
  115:  * Normalize a port into a number, string, or false.
  116:  */
  117: 
  118: function normalizePort(val) {
  119:   var port = parseInt(val, 10);
  120: 
  121:   if (isNaN(port)) {
  122:     // named pipe
  123:     return val;
  124:   }
  125: 
  126:   if (port >= 0) {
  127:     // port number
  128:     return port;
  129:   }
  130: 
  131:   return false;
  132: }
  133: 
  134: /**
  135:  * Event listener for HTTP server "error" event.
  136:  */
  137: 
  138: function onError(error) {
  139:   if (error.syscall !== 'listen') {
  140:     throw error;
  141:   }
  142: 
  143:   var bind = typeof port === 'string'
  144:     ? 'Pipe ' + port
  145:     : 'Port ' + port;
  146: 
  147:   // handle specific listen errors with friendly messages
  148:   switch (error.code) {
  149:     case 'EACCES':
  150:       console.error(bind + ' requires elevated privileges');
  151:       process.exit(1);
  152:       break;
  153:     case 'EADDRINUSE':
  154:       console.error(bind + ' is already in use');
  155:       process.exit(1);
  156:       break;
  157:     default:
  158:       throw error;
  159:   }
  160: }
  161: 
  162: /**
  163:  * Event listener for HTTP server "listening" event.
  164:  */
  165: 
  166: function onListening() {
  167:   var addr = server.address();
  168:   var bind = typeof addr === 'string'
  169:     ? 'pipe ' + addr
  170:     : 'port ' + addr.port;
  171:   debug('Listening on ' + bind);
  172: }
  173: 
174: config
175: config/database.js
  176: const mongoose = require('mongoose');
  177: 
  178: mongoose.connect(process.env.DATABASE_URL);
  179: 
  180: const db = mongoose.connection;
  181: 	
  182: db.on('connected', function() {
  183:   console.log(`Connected to MongoDB ${db.name} at ${db.host}:${db.port}`);
  184: });
185: config/ensureLoggedIn.js
  186: module.exports = function(req, res, next) {
  187:     // Pass the req/res to the next middleware/route handler
  188:     if ( req.isAuthenticated() ) return next();
  189:     // Redirect to login if the user is not already logged in
  190:     res.redirect('/auth/google');
  191:   }
192: config/passport.js
  193: const passport = require('passport');
  194: const GoogleStrategy = require('passport-google-oauth').OAuth2Strategy;
  195: const User = require('../models/user');
  196: 
  197: passport.use(new GoogleStrategy(
  198:     {
  199:       clientID: process.env.GOOGLE_CLIENT_ID,
  200:       clientSecret: process.env.GOOGLE_SECRET,
  201:       callbackURL: process.env.GOOGLE_CALLBACK
  202:     },
  203:     async function(accessToken, refreshToken, profile, cb) {
  204:         try {
  205:             let user = await User.findOne({ googleId: profile.id });
  206:             if (user) return cb(null, user);
  207:             user = await User.create({
  208:               name: profile.displayName,
  209:               googleId: profile.id,
  210:               email: profile.emails[0].value,
  211:               avatar: profile.photos[0].value
  212:             });
  213:             return cb(null, user);
  214:           } catch (err) {
  215:             return cb(err);
  216:           }
  217:     }
  218:   ));
  219: 
  220:   passport.serializeUser(function(user, cb) {
  221:     cb(null, user._id);
  222:   });
  223: 
  224:   passport.deserializeUser(async function(userId, cb) {
  225:     cb(null, await User.findById(userId));
  226:   });
227: controllers
228: controllers/comments.js
  229: const Entry = require('../models/entry');
  230: 
  231: module.exports = {
  232:     create,
  233:     delete: deleteComment
  234: };
  235: 
  236: async function deleteComment(req, res) {
  237:   try {
  238:     const entry = await Entry.findOne({
  239:       'comments._id': req.params.id,
  240:       'comments.userId': req.user._id,
  241:     });
  242: 
  243:     if (!entry) {
  244:       return res.redirect(`/entries/${entry._id}`);
  245:     }
  246:     entry.comments.id(req.params.id).remove();
  247:     await entry.save();
  248:     res.redirect(`/entries/${entry._id}`);
  249:   } catch (err) {
  250:     console.error(err);
  251:   }
  252: }
  253: 
  254: 
  255: async function create(req, res) {
  256:     
  257:     const entry = await Entry.findById(req.params.id);
  258:     console.log(req.user._id);
  259:     req.body.user = await req.user._id;
  260:     req.body.userName = req.user.name;
  261:     req.body.userAvatar = req.user.avatar;
  262:     console.log(req.body);
  263:     
  264:     entry.comments.push(req.body);
  265:     try {
  266:          await entry.save();
  267:       } catch (err) {
  268:         console.log(err);
  269:       }
  270:       res.redirect(`/entries/${entry._id}`);
  271:     }
  272: 
  273: 
274: controllers/entries.js
  275: const Entry = require('../models/entry');
  276: 
  277: module.exports = {
  278:     new: newEntry,
  279:     index,
  280:     create, 
  281:     show,
  282:     update,
  283:     edit
  284: }
  285: async function show(req, res) {
  286:   const entry = await Entry.findById(req.params.id);
  287:   res.render('entries/show', { title: 'Trip Details', entry})
  288: }
  289: function update(req, res) {
  290:   Entry.findOneAndUpdate(
  291:     {_id: req.params.id},
  292:     // update object with updated properties
  293:     req.body,
  294:     // options object with new: true to make sure updated doc is returned
  295:     {new: true},
  296:     function(err, entry) {
  297:       if (err || !entry) return res.redirect('/entry');
  298:       res.redirect(`/entries/${entry._id}`);
  299:     }
  300:   );
  301: }
  302: 
  303: async function edit(req, res) {
  304:   try {
  305:     const entry = await Entry.findById(req.params.id).exec();
  306:     
  307:     if (!entry) {
  308:       return res.redirect('/entries');
  309:     }
  310: 
  311:     res.render('entries/edit', { title: 'Update Trip', entry });
  312:   } catch (err) {
  313:     console.log(err);
  314:     res.redirect('/entries');
  315:   }
  316: }
  317: 
  318: // async function update(req, res) {
  319: //   try {
  320: //     const entry = await Entry.findOneAndUpdate(
  321: //       { _id: req.params.id },
  322: //       req.body,
  323: //       { new: true }
  324: //     );
  325: //     if (!entry) {
  326: //       return res.redirect('/entries');
  327: //     }
  328: 
  329: //     res.redirect(`/entries/${entry._id}`);
  330: //   } catch (err) {
  331: //     console.log(err);
  332: //     res.redirect('/entries'); 
  333: //   }
  334: // }
  335: 
  336: async function create(req, res) {
  337:     try {
  338:         await Entry.create(req.body);
  339:         res.redirect('/entries/new');
  340:       } catch (err) {
  341:         console.log(err);
  342:         res.render('entries/new', { errorMsg: err.message });
  343:       }
  344:     }
  345:   // const entryData = {
  346:   //   location: req.body.location,
  347:   //   lodging: req.body.lodging,
  348:   //   activities: req.body.activities,
  349:   //   restaurants: req.body.restaurants,
  350:   // };
  351:   // for (const category in entryData) {
  352:   //   if (entryData[category]) {
  353:   //     // Create an entry for this category.
  354:   //     try {
  355:   //       await Entry.create({
  356:   //         [category]: entryData[category],
  357:   //         comments: [], // Initialize with empty comments.
  358:   //       });
  359:   //       res.redirect('/entries/new'); 
  360:   //     } catch (err) {
  361:   //       console.log(err);
  362:   //       res.render('entries/new', { errorMsg: err.message });
  363:   //     }
  364:   //   }
  365:   // }
  366: 
  367: //   res.redirect('/entries/new'); // Redirect back to the "New Trip" page.
  368: // }
  369:   
  370:     
  371: async function index(req, res) {
  372:     const entries = await Entry.find({});
  373:     res.render('entries/index', { title: 'My Trips', entries });
  374:   }
  375: 
  376: function newEntry(req, res) {
  377:     res.render('entries/new', { title: 'Add Trip', errorMsg: ''});
  378: }
  379: 
380: models
381: models/entry.js
  382: const mongoose = require('mongoose');
  383: 
  384: const Schema = mongoose.Schema;
  385: 
  386: const commentSchema = new Schema({
  387:     content: {type: String, required: true},
  388:     user: {
  389:         type: Schema.Types.ObjectId,
  390:         ref: 'User',
  391:         required: true
  392:       },
  393:       userName: String,
  394:       userAvatar: String
  395: }, {
  396:     timestamps: true
  397: });
  398: 
  399: const entrySchema = new Schema({
  400:     location: {type: String},
  401:     lodging: {type: String},
  402:     activities: {type: String},
  403:     restaurants: {type: String},
  404:     comments: [commentSchema],
  405: }, {
  406:     timestamps: true
  407: });
  408: 
  409: 
  410: 
  411: module.exports = mongoose.model('Entry', entrySchema);
412: models/user.js
  413: const mongoose = require('mongoose');
  414: const Schema = mongoose.Schema;
  415: 
  416: const userSchema = new Schema({
  417:   name: String,
  418:   googleId: {
  419:     type: String,
  420:     required: true
  421:   },
  422:   email: String,
  423:   avatar: String
  424: }, {
  425:   timestamps: true
  426: });
  427: 
  428: module.exports = mongoose.model('User', userSchema);
429: public
430: public/images
431: public/javascripts
432: public/stylesheets
433: public/stylesheets/style.css
  434: * {
  435:   background-color: blanchedalmond;
  436:   font-family: 'Playfair Display', serif;
  437: }
  438: body {
  439:   display: grid;
  440:   grid-template-rows: 1fr 3fr 3fr;
  441:   grid-template-columns: 1fr 1fr 1fr;
  442: 
  443: }
  444: 
  445: body > nav {
  446:   display: flex;
  447:   align-items: center; 
  448:   height: 50px;
  449: }
  450: 
  451: 
  452: a {
  453:   color: #0d5d1e;
  454: }
  455: 
  456: h1 {
  457:   text-align: center;
  458: }
  459: 
  460: #title {
  461:   display: grid;
  462:   grid-row: 2 / span 1;
  463:   grid-column: 1 / span 3;
  464:   justify-content: center;
  465:   align-items: flex-start; */
  466: }
  467: 
  468: #slogan {
  469:   display: grid;
  470:   grid-row: 2 / span 1;
  471:   grid-column: 1 / span 3;
  472:   justify-content: center;
  473:   align-items: flex-start;
  474:   margin-top: 80px;
  475: }
  476: 
  477: h2 {
  478:   text-align: center;
  479: }
  480: 
  481: /* .login {
  482:   display: flex;
  483:   justify-content: center;
  484:   align-items: center;
  485:   height: 34px;
  486: } */
  487: 
  488: .login img {
  489:   height: 20px;
  490: }
  491: 
  492: ul {
  493:   list-style-type: disc;
  494:   padding-left: 20px;
  495: }
  496: 
  497: li {
  498:   margin-bottom: 10px; 
  499: }
  500: 
  501: .comment-user img {
  502:   border-radius: 50%;
  503:   height: 40px;
  504: }
  505: 
  506: 
507: routes
508: routes/comments.js
  509: const express = require('express');
  510: const router = express.Router();
  511: const commentsCtrl = require('../controllers/comments');
  512: const ensureLoggedIn = require('../config/ensureLoggedIn');
  513: 
  514: router.post('/entries/:id/comments', ensureLoggedIn, commentsCtrl.create);
  515: 
  516: router.delete('/entries/:id/comments/:id', commentsCtrl.delete);
  517: 
  518: module.exports = router;
519: routes/entries.js
  520: const express = require('express');
  521: const router = express.Router();
  522: const entriesCtrl = require('../controllers/entries');
  523: 
  524: router.get('/', entriesCtrl.index);
  525: 
  526: router.get('/new', entriesCtrl.new);
  527: 
  528: router.get('/:id', entriesCtrl.show);
  529: 
  530: router.post('/', entriesCtrl.create);
  531: 
  532: router.get('/:id/edit', entriesCtrl.edit);
  533: 
  534: router.put('/:id', entriesCtrl.update);
  535: 
  536: 
  537: 
  538: module.exports = router;
  539: 
  540: 
541: routes/index.js
  542: var express = require('express');
  543: var router = express.Router();
  544: const passport = require('passport');
  545: 
  546: /* GET home page. */
  547: router.get('/', function(req, res, next) {
  548:   res.render('index', { title: 'Travel Diary' });
  549: });
  550: 
  551: router.get('/auth/google', passport.authenticate(
  552:   'google',
  553:   {
  554:     scope: ['profile', 'email'],
  555:   }
  556: ));
  557: 
  558: router.get('/oauth2callback', passport.authenticate(
  559:   'google',
  560:   {
  561:     successRedirect: '/',
  562:     failureRedirect: '/'
  563:   }
  564: ));
  565: 
  566: router.get('/logout', function(req, res){
  567:   req.logout(function() {
  568:     res.redirect('/');
  569:   });
  570: });
  571: module.exports = router;
  572: 
573: routes/users.js
  574: var express = require('express');
  575: var router = express.Router();
  576: 
  577: 
  578: // /* GET users listing. */
  579: router.get('/', function(req, res, next) {
  580:   res.send('respond with a resource');
  581: });
  582: 
  583: module.exports = router;
  584: 
585: views
586: views/entries
587: views/entries/edit.ejs
  588: <%- include('../partials/header') %>
  589: 
  590: <h2><%= entry.location %></h2>
  591: 
  592: <h2>Update Trip</h2>
  593: <form action="/entries/<%= entry._id %>" method="POST">
  594:   <label>Lodging:
  595:     <input type="text" name="lodging">
  596:   </label><br>
  597:   <label>Activities:
  598:     <input type="text" name="activities">
  599:   </label><br>
  600:   <label>Restaurants:
  601:     <input type="text" name="restaurants" >
  602:   </label><br>
  603: 
  604:   <button type="submit">Update</button>
  605: </form>
  606: 
  607: <%- include('../partials/footer') %>
608: views/entries/index.ejs
  609: <%- include('../partials/header') %>
  610: 
  611: <h1>My Trips</h1>
  612: <ul> 
  613:     <p>Locations:</p>
  614:     <% entries.forEach(function(e) { %>
  615:       <li> 
  616:         <a href="/entries/<%= e._id %>"><%= e.location %></a>
  617:       </li>
  618:     <% }); %>
  619: </ul> 
  620: 
  621: <%- include('../partials/footer') %>
622: views/entries/new.ejs
  623: <%- include('../partials/header') %>
  624: 
  625: <h2>Enter a New Trip</h2>
  626: <form action="/entries" method="POST">
  627:   <label>Location:
  628:     <input type="text" name="location">
  629:   </label><br>
  630:   <label>Lodging:
  631:     <input type="text" name="lodging">
  632:   </label><br>
  633:   <label>Activities:
  634:     <input type="text" name="activities">
  635:   </label><br>
  636:   <label>Restaurants:
  637:     <input type="text" name="restaurants" >
  638:   </label><br>
  639: 
  640:   <button type="submit">Add Trip</button>
  641: </form>
  642: <p><%= errorMsg %></p>
  643: 
  644: <%- include('../partials/footer') %>
645: views/entries/show.ejs
  646: <%- include('../partials/header') %>
  647: 
  648: <h2><%= entry.location %></h2>
  649: 
  650: <section id="show-page">
  651:     <div>Lodging: </div>
  652:     <div><%= entry.lodging %></div>
  653:     <div>Activities: </div>
  654:     <div><%= entry.activities %></div>
  655:     <div>Restaurants: </div>
  656:     <div><%= entry.restaurants %></div>
  657:     
  658: <a href="/entries/<%= entry._id %>/edit">Edit Trip</a>
  659: 
  660: <br><br><h2>Comments</h2>
  661: 
  662:   
  663: <form id="add-comment-form" method="POST"
  664:     action="/entries/<%= entry._id %>/comments">
  665:     <label>Write a Comment:</label>
  666:     <textarea name="content"></textarea>
  667:     <input type="submit" value="Post">
  668: </form>
  669: 
  670: 
  671: <% if (entry.comments.length) { %>
  672:     <table>
  673:       <thead>
  674:         <tr>
  675:         <th>User</th>
  676:           <th>Comment</th>
  677:           <th>Date</th>
  678:         </tr>
  679:       </thead>
  680:       <tbody>
  681: 
  682:         <% entry.comments.forEach(function(c) { %>
  683: 
  684:           <tr>
  685:             <td class="comment-user"><img alt="avatar" src="<%= c.userAvatar %>" referrerpolicy="no-referrer" ><%= c.userName %></td>
  686:             <td><%= c.content %></td>
  687:             <td><%= c.createdAt.toLocaleDateString() %></td>
  688:             <form method="POST" action="/entries/<%= entry._id %>/comments/<%= c._id %>?_method=DELETE">
  689:               <button type="submit">Delete</button>
  690:             </form>
  691:           </tr>
  692:           
  693:         <% }); %>
  694:       </tbody>
  695:     </table>
  696:   <% } else { %>
  697:     <h5>No Comments Yet</h5>
  698:   <% } %>
  699: 
  700: <%- include('../partials/footer') %>
701: views/error.ejs
  702: <h1><%= message %></h1>
  703: <h2><%= error.status %></h2>
  704: <pre><%= error.stack %></pre>
  705: 
706: views/index.ejs
  707: <%- include('./partials/header') %>
  708: 
  709:     <h1 id="title"><%= title %></h1>
  710:     <p id="slogan">Discover, Document, Display - One Adventure at a Time</p>
  711:    
  712: <%- include('./partials/footer') %>
  713:  
  714: 
715: views/partials
716: views/partials/footer.ejs
  717: </body>
  718: </html>
719: views/partials/header.ejs
  720: <!DOCTYPE html>
  721: <html>
  722:   <head>
  723:     <meta charset="UTF-8">
  724:     <meta name="viewport" content="width=device-width, initial-scale=1.0">
  725:     <meta http-equiv="X-UA-Compatible" content="ie=edge">
  726:     <title><%= title %></title>
  727:     <link rel='stylesheet' href='/stylesheets/style.css' />
  728:     <link href="https://fonts.googleapis.com/css2?family=Playfair+Display&display=swap" rel="stylesheet">
  729:     
  730:   </head>
  731:   <body>
  732:     <nav>
  733:       <a href="/" <%- title === 'Home' ? 'class="active"' : '' %>>Home</a>
  734:       |
  735:       <% if (user) { %>
  736:         <a href="/entries" <%- title === 'My Trips' ? 'class="active"' : '' %>>My Trips</a>
  737:         |
  738:         <a href="/entries/new" <%- title === 'Add an Entry' ? 'class="active"' : '' %>>Add an Entry</a>
  739:         |
  740:         <a href="/" <%- title === 'My Profile' ? 'class="active"' : '' %>>My Profile</a>
  741:         |
  742:         <a href="/logout">LOG OUT</a>
  743:     <% } else { %>
  744:         <a href="/auth/google" class="login">LOG IN&nbsp;<img src="https://i.imgur.com/FHjYyi0.png"></a>
  745:     <% } %>
  746:     </nav>
